First C Block...
J1048+0032 ---> SDSS obj has field=2
Create dirty image:
split(vis = '18B-229.sb35832638.eb35934441.58445.52374582176.ms' , outputvis = 'SDSSJ1048+0032_split.ms', field = '2')

tclean(vis = 'SDSSJ1048+0032_split.ms', imagename = 'SDSSJ1048+0032_split.ms.dirty.3000', imsize = [3000], pblimit=-0.01)

9/3: try 3000

Flag spws for BP 3.7-4.0GHz and 2.1-2.5GHz

spw (>28) and (17-20)

flagdata(vis = 'SDSSJ1048+0032_split.ms', spw = '>28')
flagdata(vis = 'SDSSJ1048+0032_split.ms', spw = '17~20')

statwt(vis = 'SDSSJ1048+0032_split.ms', spw = '>28')
statwt(vis = 'SDSSJ1048+0032_split.ms', spw = '17~20')

*find concise way to do this

Create new dirty image with data flagged:
tclean(vis = 'SDSSJ1048+0032_split.ms', imagename = 'SDSSJ1048+0032_split.ms.dirty2', imsize = [640])


Begin cleaning w/ threshold .225mJy:
tclean(vis = 'SDSSJ1048+0032_split.ms', imagename = 'SDSSJ1048+0032_split.ms.imsize640.niter10K.threshp225mJy', imsize = [640], niter = 10000, threshold = '0.225mJy')
-cleaned in 332 iterations

Try with deeper cleaning:
tclean(vis = 'SDSSJ1048+0032_split.ms', imagename = 'SDSSJ1048+0032_split.ms.imsize640.niter10K.threshp2mJy', imsize = [640], niter = 10000, threshold = '0.2mJy')

Peak Flux = 4.86mJy
Integrated Flux = 5.02mJy


tclean(vis = 'SDSSJ1048+0032_split.ms', imagename = 'SDSSJ1048+0032_split.ms.imsize640.niter5K', imsize = [640], niter = 5000)


--------------------

tclean(vis = 'SDSSJ1048+0032_split.ms', imagename = 'SDSSJ1048+0032_split.ms.sz640.thresh15uJy', imsize = [640], threshold = '0.15mJy', niter = 10000)
 
***

exportfits(imagename = 'SDSSJ0929+3002_split.ms.sz672.thresh24uJy.image', fitsimage = 'SDSSJ0929+3002')




--8/20--

tclean(vis = 'SDSSJ1048+0032_split.ms', imagename = 'SDSSJ1048+0032_split.ms.sz1512.dirty', imsize = [1512], pblimit=-0.01)

tclean(vis = 'SDSSJ1048+0032_split.ms', imsize = [1512], pblimit=-0.01, imagename = 'SDSSJ1048+0032_split.ms.auto_thresh.thresh55uJy.1512p', threshold = '55uJy', niter = 15000, usemask='auto-multithresh', sidelobethreshold=2.0, noisethreshold=4.25, lownoisethreshold=1.5, minbeamfrac=0.3, negativethreshold=0.0, verbose=True)




--With Self Cal from Amy--

split(vis = '18B-229.sb35832638.eb35934441.58445.52374582176.ms',  outputvis = '1_J1048+0032_selfcal.ms', field = '2')

clean(vis = '1_J1048+0032_selfcal.ms', imagename = '1_J1048+0032_selfcal.ms.shallowbright', imsize = [3000], interactive = True)

gaincal(vis = '1_J1048+0032_selfcal.ms', caltable = '1048+0032_solint_4min_r1', calmode = 'p', refant = 'ea02', solint = '4min', minsnr = 3.0)

plotcal(caltable='1048+0032_solint_4min_r1',xaxis='time',yaxis='phase', iteration='antenna',subplot=331,plotrange=[0,0,-150,150])

applycal(vis='1_J1048+0032_selfcal.ms', gaintable=['1048+0032_solint_4min_r1'], calwt=False)

delmod(vis = '1_J1048+0032_selfcal.ms')

tclean(vis = '1_J1048+0032_selfcal.ms', imsize = [3500], pblimit=-0.01, imagename = '1_J1048+0032_selfcal.ms.45uJy', threshold = '45uJy', niter = 100000)




-Self Cal 2 p and ap-

split(vis = '1_J1048+0032_selfcal.ms',  outputvis = '2_J1048+0032_selfcal.ms', datacolumn = 'corrected')

clean(vis = '2_J1048+0032_selfcal.ms', imagename = '2_J1048+0032_selfcal.ms.shallowbright', imsize = [3500], interactive = True)

gaincal(vis = '2_J1048+0032_selfcal.ms', caltable = '1048+0032_solint_4min_r2', calmode = 'p', refant = 'ea02', solint = '4min', minsnr = 3.0)

gaincal(vis = '2_J1048+0032_selfcal.ms', caltable = '1048+0032_solint_2min_amp_r2', calmode = 'ap', refant = 'ea02', solint = '2min', minsnr = 3.0)


plotcal(caltable='1048+0032_solint_2min_amp_r2',xaxis='time',yaxis='phase', iteration='antenna',subplot=331,plotrange=[0,0,-150,150])

applycal(vis='2_J1048+0032_selfcal.ms', gaintable=['1048+0032_solint_4min_r2', '1048+0032_solint_2min_amp_r2'], calwt=False)

delmod(vis = '2_J1048+0032_selfcal.ms')

tclean(vis = '2_J1048+0032_selfcal.ms', imsize = [3500], pblimit=-0.01, imagename = '2_J1048+0032_selfcal.ms.60uJy', threshold = '60uJy', niter = 100000)






-Self Cal 3 ap-

split(vis = '2_J1048+0032_selfcal.ms',  outputvis = '3ap_J1048+0032_selfcal.ms', datacolumn = 'corrected')

clean(vis = '3ap_J1048+0032_selfcal.ms', imagename = '3ap_J1048+0032_selfcal.ms.shallowbright', imsize = [3500], interactive = True)

gaincal(vis = '3ap_J1048+0032_selfcal.ms', caltable = '1048+0032_solint_2min_amp_r3', calmode = 'ap', refant = 'ea02', solint = '2min', minsnr = 3.0)



plotcal(caltable='1048+0032_solint_2min_amp_r3',xaxis='time',yaxis='phase', iteration='antenna',subplot=331,plotrange=[0,0,-150,150])

applycal(vis='3ap_J1048+0032_selfcal.ms', gaintable=['1048+0032_solint_2min_amp_r3'], calwt=False)

delmod(vis = '3ap_J1048+0032_selfcal.ms')

tclean(vis = '3ap_J1048+0032_selfcal.ms', imsize = [3500], pblimit=-0.01, imagename = '3ap_J1048+0032_selfcal.ms.60uJy', threshold = '60uJy', niter = 100000)




---Compression 4/9---

#importasdm isn't working, I think this should work by just splitting out a new MS to
#

split(vis = '18B-229.sb35832638.eb35934441.58445.52374582176.ms', outputvis = 'J1048+0032_compressionSplit.ms', spw = '0~1, 16~31', datacolumn = 'data')

*Move new ms and copy of pipescript to separate directory
*Change vis to the name of ms created above in casapipescript.py
*Add hifv_syspower() after priorcals ... keep Hanning smoothing!
*Open casa with casa --pipeline and run execfile('casapipescript.py')


Done; now do the cleaning
split(vis = 'J1048+0032_compressionSplit.ms', outputvis = 'J1048+0032.ms', field='2')




---With Self cal from Amy---

*Method 2: do self-cals all on same ms
Note that what's going on is that the raw "data" column contains the initial (pipeline) calibration but *not* the initial round of self-cal corrections
- use delmod to delete the model
- run gaincal but for this 2nd round of selfcal, use the gaintable input parameter to apply the initial self-cal solutions on-the-fly. e.g.:
   gaincal(vis=<my.ms>, caltable='selfcal_2.cal', gaintable=['selfcal_1.cal'], solint='10s') 
(note gaintable doesn't have to be a list with only one table applied on the fly, but for multiple tables it would have to be)
- look at the solutions for selfcal_2.cal and if they are good:
applycal(vis=<my.ms>, gaintable=['selfcal_1.cal','selfcal2.cal']
- image but create a brand new image as before e.g. selfcal_2.image


split(vis = 'J1048+0032_compressionSplit.ms',  outputvis = '1_J1048+0032_selfcal.ms', field = '2')

clean(vis = '1_J1048+0032_selfcal.ms', imsize = [3500], imagename = '1_J1048+0032_selfcal.ms.shallowbright_clean', interactive=True)

#30s solint was a bit too crazy
gaincal(vis = '1_J1048+0032_selfcal.ms', caltable = '1048+0032_solint1p5min_r1', calmode = 'p', refant = 'ea02', solint = '1.5min', minsnr = 3.0)

plotcal(caltable='1048+0032_solint1p5min_r1',xaxis='time',yaxis='phase', iteration='antenna',subplot=331,plotrange=[0,0,-180,180])

applycal(vis='1_J1048+0032_selfcal.ms', gaintable=['1048+0032_solint1p5min_r1'], calwt=False)

gaincal(vis='1_J1048+0032_selfcal.ms', caltable='1048+0032_solint30s_r2', gaintable=['1048+0032_solint1p5min_r1'], solint='30s', refant='ea02', calmode='p', minsnr=3.0)

plotcal(caltable='1048+0032_solint30s_r2',xaxis='time',yaxis='phase', iteration='antenna',subplot=331,plotrange=[0,0,-180,180])

applycal(vis='1_J1048+0032_selfcal.ms', gaintable=['1048+0032_solint1p5min_r1', '1048+0032_solint30s_r2'], calwt=False)

gaincal(vis='1_J1048+0032_selfcal.ms', caltable='1048+0032_solint20s_r3', gaintable=['1048+0032_solint1p5min_r1', '1048+0032_solint30s_r2'], solint='20s', refant='ea02', calmode='p', minsnr=3.0)

plotcal(caltable='1048+0032_solint20s_r3',xaxis='time',yaxis='phase', iteration='antenna',subplot=331,plotrange=[0,0,-180,180])

applycal(vis='1_J1048+0032_selfcal.ms', gaintable=['1048+0032_solint1p5min_r1', '1048+0032_solint30s_r2', '1048+0032_solint20s_r3'], calwt=False)

gaincal(vis='1_J1048+0032_selfcal.ms', caltable='1048+0032_solint20s_r4', gaintable=['1048+0032_solint1p5min_r1', '1048+0032_solint30s_r2', '1048+0032_solint20s_r3'], solint='20s', refant='ea02', calmode='p', minsnr=3.0)

plotcal(caltable='1048+0032_solint20s_r4',xaxis='time',yaxis='phase', iteration='antenna',subplot=331,plotrange=[0,0,-180,180])

applycal(vis='1_J1048+0032_selfcal.ms', gaintable=['1048+0032_solint1p5min_r1', '1048+0032_solint30s_r2', '1048+0032_solint20s_r3', '1048+0032_solint20s_r4'], calwt=False)

gaincal(vis='1_J1048+0032_selfcal.ms', caltable='1048+0032_solint10s_r5', gaintable=['1048+0032_solint1p5min_r1', '1048+0032_solint30s_r2', '1048+0032_solint20s_r3', '1048+0032_solint20s_r4'], solint='10s', refant='ea02', calmode='p', minsnr=3.0)

plotcal(caltable='1048+0032_solint10s_r5',xaxis='time',yaxis='phase', iteration='antenna',subplot=331,plotrange=[0,0,-80,80])

#solint looks to be as low as it will get..

gaincal(vis='1_J1048+0032_selfcal.ms', caltable='1048+0032_solint15s_r5ap', gaintable=['1048+0032_solint1p5min_r1', '1048+0032_solint30s_r2', '1048+0032_solint20s_r3', '1048+0032_solint20s_r4'], solint='15s', refant='ea02', calmode='ap', minsnr=3.0)

plotcal(caltable='1048+0032_solint15s_r5ap',xaxis='time',yaxis='phase', iteration='antenna',subplot=331,plotrange=[0,0,-180,180])

applycal(vis='1_J1048+0032_selfcal.ms', gaintable=['1048+0032_solint1p5min_r1', '1048+0032_solint30s_r2', '1048+0032_solint20s_r3', '1048+0032_solint20s_r4', '1048+0032_solint15s_r5ap'], calwt=False)

delmod('1_J1048+0032_selfcal.ms')

tclean(vis = '1_J1048+0032_selfcal.ms', imagename = '1_J1048+0032_selfcal.ms.30uJyWide', threshold='30uJy', niter=200000, imsize=[3500], pblimit=-0.01)

delmod('1_J1048+0032_selfcal.ms')

FINAL RMS: 9.2uJy

